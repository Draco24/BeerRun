// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_liblib2$_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.length($.$$index(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._liblib2$_pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  $index: function(index) {
    var t1 = this._groups;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout1(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout1: function(state0, index, t1) {
    return $.$$index(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib2$_current",
  get$current: function() {
    return this._liblib2$_current;
  },
  moveNext$0: function() {
    this._liblib2$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib2$_current == null);
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  $index: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.JsStringBuffer = {"": "Object;_contents",
  get$length: function() {
    return $.length(this._contents);
  },
  add$1: function(obj) {
    var t1, t2;
    if (typeof obj !== "string")
      return this.add$1$bailout(1, obj);
    t1 = this._contents;
    t2 = obj;
    this._contents = t1 + t2;
  },
  add$1$bailout: function(state0, obj) {
    var t1, t2;
    t1 = this._contents;
    t2 = typeof obj === "string" ? obj : $.S(obj);
    this._contents = t1 + t2;
  },
  clear$0: function() {
    this._contents = "";
  },
  toString$0: function() {
    return this._contents;
  }
};

$$.Collection = {"": "Iterable;",
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  clear$0: function() {
    $.IterableMixinWorkaround_removeMatching(this, new $.Collection_clear_anon());
  },
  $isCollection: function() {
    return true;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, i;
    t1 = {};
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout(1, t1, t2);
    for (; $.$$lt(t1.i_1, t2.length) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
      if ($.$$gt(t1.i_1, 0) === true)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (!(t2 == null))
      $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout(2, t1, t2);
    t3 = $.toString(t1.sb_0);
    t1.sb_0 = $.StringBuffer_StringBuffer("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add(t1.sb_0, ", ");
      t4 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add(t4, t2[i]);
    }
    t2 = $.toString(t1.sb_0);
    t4 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t4) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t4) + "(" + $.S(t3) + ")\n" + "Found: " + $.S(t4) + "(" + $.S(t2) + ")";
  },
  toString$0$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.StringBuffer_StringBuffer("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSStringJSArray(t2); $.$$lt(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
            if ($.$$gt(t1.i_1, 0) === true)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (!(t2 == null))
          $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, t4, i;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          t3 = $.toString(t1.sb_0);
          t1.sb_0 = $.StringBuffer_StringBuffer("");
          for (t4 = $.getInterceptor$JSStringJSArray(t2), i = 0; $.CONSTANT.$lt(i, t4.get$length(t2)); ++i) {
            if (i > 0)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, t4.$index(t2, i));
          }
          t2 = $.toString(t1.sb_0);
          t4 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t4) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t4) + "(" + $.S(t3) + ")\n" + "Found: " + $.S(t4) + "(" + $.S(t2) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function() {
    return "Unsupported operation: " + this.message;
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function() {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  }
};

$$.IllegalJSRegExpException = {"": "Object;_pattern,_errmsg",
  toString$0: function() {
    return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
  }
};

$$.Iterable = {"": "Object;",
  contains$1: function(element) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      if ($.$$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  toSet$0: function() {
    return $.Set_Set$from(this);
  },
  get$length: function() {
    var t1, count;
    t1 = $.iterator(this);
    for (count = 0; t1.moveNext$0() === true;)
      ++count;
    return count;
  }
};

$$.Object = {"": ";",
  $eq: function(other) {
    if (other == null)
      return false;
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.ObjectInterceptor = {"": "Object;",
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  $ge: function(receiver, a0) {
    return receiver.$ge(a0);
  },
  $eq: function(receiver, a0) {
    return receiver.$eq(a0);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  $indexSet: function(receiver, a0, a1) {
    return receiver.$indexSet(a0, a1);
  },
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  $add: function(receiver, a0) {
    return receiver.$add(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  $index: function(receiver, a0) {
    return receiver.$index(a0);
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  $and: function(receiver, a0) {
    return receiver.$and(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  toSet$0: function(receiver) {
    return receiver.toSet$0();
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  $tdiv: function(receiver, a0) {
    return receiver.$tdiv(a0);
  },
  get$contains: function(receiver) {
    return receiver.get$contains();
  },
  $sub: function(receiver, a0) {
    return receiver.$sub(a0);
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  $lt: function(receiver, a0) {
    return receiver.$lt(a0);
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  $mul: function(receiver, a0) {
    return receiver.$mul(a0);
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  $gt: function(receiver, a0) {
    return receiver.$gt(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  removeMatching$1: function(receiver, a0) {
    return receiver.removeMatching$1(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  removeAll$1: function(receiver, elements) {
    $.IterableMixinWorkaround_removeAllList(receiver, elements);
  },
  removeMatching$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeMatchingList(receiver, test);
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure0(this, "contains$1", receiver);
  },
  toString$0: function(receiver) {
    return $.Collections_collectionToString(receiver);
  },
  toSet$0: function(receiver) {
    return $.Set_Set$from(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $mul: function(receiver, other) {
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;",
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;",
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$JSNumber(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure1(this, "contains$2", receiver);
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, t3, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.hashCode(key);
    t3 = this._keys.length;
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & t3 - 1) >>> 0;
    for (insertionIndex = -1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.$$eq(existingKey, key) === true)
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, key, null, hash, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, key, t1, hash, numberOfProbes0, insertionIndex) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.hashCode(key);
      case 1:
        state0 = 0;
        hash = $.$$and(t1, this._keys.length - 1);
        insertionIndex = -1;
        numberOfProbes = 1;
      case 2:
        var numberOfProbes, existingKey;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.$$eq(existingKey, key) === true)
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT4)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var t1, hash, numberOfProbes, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.$$and($.hashCode(key), this._keys.length - 1);
    if (t1 !== (t1 | 0))
      return this._probeForLookup$1$bailout(1, key, t1);
    for (hash = t1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, t1) {
    var hash, numberOfProbes, existingKey, numberOfProbes0;
    for (hash = t1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var t1, capacity, t2;
    t1 = $.$$add(this._numberOfEntries, 1);
    if ($.$$ge(t1, this._loadLimit) === true) {
      this._grow$1(this._keys.length * 2);
      return;
    }
    capacity = this._keys.length;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = this._numberOfDeleted;
    if (t2 > capacity - t1 - t2)
      this._grow$1(capacity);
  },
  _grow$1: function(newCapacity) {
    var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
    capacity = this._keys.length;
    this._loadLimit = $.$$tdiv($.$$mul(newCapacity, 3), 4);
    oldKeys = this._keys;
    oldValues = this._values;
    this._keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT4)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  clear$0: function() {
    var t1, length, t2, t3, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._keys;
    length = t1.length;
    for (t2 = this._values, t3 = t2.length, i = 0; i < length; ++i) {
      t1[i] = null;
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = null;
    }
  },
  $indexSet: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT4) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.$$indexSet$bailout0(1, key, value, t1, index);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  $$indexSet$bailout0: function(state0, key, value, t1, index) {
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT4))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.$$add(t1, 1);
          }
        t1 = this._keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  $index: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.$$index$bailout0(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout0: function(state0, index) {
    var t1;
    if ($.$$lt(index, 0) === true)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  remove$1: function(key) {
    var index, t1, value;
    index = this._probeForLookup$1(key);
    if ($.$$ge(index, 0) === true) {
      this._numberOfEntries = $.$$sub(this._numberOfEntries, 1);
      t1 = this._values;
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t1.length)
        throw $.ioore(index);
      value = t1[index];
      t1[index] = null;
      t1 = this._keys;
      if (index >= t1.length)
        throw $.ioore(index);
      t1[index] = $.CONSTANT4;
      this._numberOfDeleted = this._numberOfDeleted + 1;
      return value;
    }
    return;
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  containsKey$1: function(key) {
    return $.$$eq(this._probeForLookup$1(key), -1) !== true;
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  $isMap: function() {
    return true;
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, t2, length, t3, newIndex, key;
    t1 = this._map;
    t2 = t1._keys;
    length = t2.length;
    t3 = this._index;
    if (t3 !== (t3 | 0))
      return this.moveNext$0$bailout1(1, length, t3, t1);
    newIndex = t3 + 1;
    for (; newIndex < length;) {
      if (newIndex < 0)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT4)) {
        this._liblib1$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1._values);
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = length;
    this._liblib1$_current = null;
    return false;
  },
  moveNext$0$bailout1: function(state0, length, t2, t1) {
    var newIndex, key;
    newIndex = $.$$add(t2, 1);
    for (; $.$$lt(newIndex, length) === true;) {
      t2 = t1._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT4)) {
        this._liblib1$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1._values);
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = length;
    this._liblib1$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_liblib1$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_liblib1$_list,_map",
  $indexSet: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.$$indexSet$bailout(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._liblib1$_list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      t3 = this._liblib1$_list.lastEntry$0();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
        return this.$$indexSet$bailout(2, key, null, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  $$indexSet$bailout: function(state0, key, value, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.$$index(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._liblib1$_list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              $.$$indexSet(t1, key, this._liblib1$_list.lastEntry$0());
          }
    }
  },
  $index: function(key) {
    var t1 = this._map;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, key, t1);
    if (key !== (key | 0))
      throw $.iae(key);
    if (key < 0 || key >= t1.length)
      throw $.ioore(key);
    t1 = t1[key];
    if (t1 == null)
      return;
    return t1.get$element().get$value();
  },
  $$index$bailout: function(state0, key, t1) {
    t1 = $.$$index(t1, key);
    if (t1 == null)
      return;
    return t1.get$element().get$value();
  },
  remove$1: function(key) {
    var t1 = $.remove(this._map, key);
    if (t1 == null)
      return;
    t1.remove$0();
    return t1.get$element().get$value();
  },
  forEach$1: function(f) {
    this._liblib1$_list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    return $.length(this._map);
  },
  clear$0: function() {
    $.clear(this._map);
    this._liblib1$_list.clear$0();
  },
  toString$0: function() {
    return $.Maps_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._liblib1$_list = $.DoubleLinkedQueue$();
  },
  $isMap: function() {
    return true;
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Iterable;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.$$eq(entry.get$element(), o) === true) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAllList(this, elements);
  },
  removeMatching$1: function(test) {
    var entry, next;
    entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel); entry = next) {
      next = entry.get$_next();
      if (test.call$1(entry.get$element()) === true)
        entry.remove$0();
    }
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  $isCollection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_liblib1$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib1$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib1$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.HashSet = {"": "Collection;_backingMap",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.$indexSet(value, value);
  },
  remove$1: function(value) {
    var t1 = this._backingMap;
    if (t1.containsKey$1(value) !== true)
      return false;
    t1.remove$1(value);
    return true;
  },
  contains$1: function(value) {
    return this._backingMap.containsKey$1(value);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$length: function() {
    return $.length(this._backingMap);
  },
  get$iterator: function() {
    return $._HashSetIterator$(this);
  },
  toString$0: function() {
    return $.Collections_collectionToString(this);
  },
  $isSet: true,
  $isCollection: function() {
    return true;
  }
};

$$._HashSetIterator = {"": "Object;_keysIterator",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT4)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = t1.moveNext$0();
      if (result === true)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT4;
      else
        t2 = false;
    } while (t2);
    return result;
  }
};

$$.ListIterator = {"": "Object;_list,_liblib0$_length,_liblib0$_position,_liblib0$_current",
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._list;
    t2 = t1.length;
    t3 = this._liblib0$_length;
    if (t2 !== t3)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._liblib0$_position;
    if (t2 !== (t2 | 0))
      return this.moveNext$0$bailout0(1, t2, t1, t3);
    ++t2;
    if (t2 < t3) {
      this._liblib0$_position = t2;
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      this._liblib0$_current = t1[t2];
      return true;
    }
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout0: function(state0, t2, t1, t3) {
    t2 = $.$$add(t2, 1);
    if ($.$$lt(t2, t3) === true) {
      this._liblib0$_position = t2;
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      this._liblib0$_current = t1[t2];
      return true;
    }
    this._liblib0$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.Console = {"": "Object;",
  get$_isConsoleDefined: function() {
    return typeof console != 'undefined';
  },
  log$1: function(arg) {
    return this.get$_isConsoleDefined() === true ? console.log(arg) : null;
  }
};

$$._AttributeMap = {"": "Object;",
  clear$0: function() {
    for (var t1 = $.iterator(this.get$keys()); t1.moveNext$0() === true;)
      this.remove$1(t1.get$current());
  },
  forEach$1: function(f) {
    var t1, t2;
    for (t1 = $.iterator(this.get$keys()); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._liblib3$_element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.$isJavaScriptIndexingBehavior()))
      return this.get$keys$bailout(1, attributes);
    keys = $.List_List(0);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push(attributes[i].get$$$dom_localName());
      }
    }
    return keys;
  },
  get$keys$bailout: function(state0, attributes, t1, len, keys) {
    switch (state0) {
      case 0:
        attributes = this._liblib3$_element.attributes;
      case 1:
        state0 = 0;
        keys = $.List_List(0);
        t1 = $.getInterceptor$JSStringJSArray(attributes);
        len = t1.get$length(attributes);
      case 2:
        var i;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT.$lt(i, len); ++i)
          if (this._matches$1(t1.$index(attributes, i)) === true)
            keys.push(t1.$index(attributes, i).get$$$dom_localName());
        return keys;
    }
  },
  $isMap: function() {
    return true;
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_liblib3$_element",
  containsKey$1: function(key) {
    return this._liblib3$_element.$$dom_hasAttribute$1(key);
  },
  $index: function(key) {
    return this._liblib3$_element.$$dom_getAttribute$1(key);
  },
  $indexSet: function(key, value) {
    this._liblib3$_element.$$dom_setAttribute$2(key, $.S(value));
  },
  remove$1: function(key) {
    var t1, value;
    t1 = this._liblib3$_element;
    value = t1.$$dom_getAttribute$1(key);
    t1.$$dom_removeAttribute$1(key);
    return value;
  },
  get$length: function() {
    return $.length(this.get$keys());
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_length,_position,_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    ++t1;
    t2 = this._length;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t2);
    if (t1 < t2) {
      t2 = this._array;
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, t1, t2);
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t2.length)
        throw $.ioore(t1);
      this._current = t2[t1];
      this._position = t1;
      return true;
    }
    this._current = null;
    this._position = t2;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        t1 = $.$$add(t1, 1);
        t2 = this._length;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$lt(t1, t2) === true)
          switch (state0) {
            case 0:
              t2 = this._array;
            case 3:
              state0 = 0;
              this._current = $.$$index(t2, t1);
              this._position = t1;
              return true;
          }
        this._current = null;
        this._position = t2;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.CanvasManager = {"": "Object;_canvas,_width,_height",
  get$width: function() {
    return this._width;
  },
  get$height: function() {
    return this._height;
  },
  get$canvas: function() {
    return this._canvas;
  },
  resize$2: function(width, height) {
    var t1, t2;
    this._width = width;
    this._height = height;
    t1 = $.S($.toString(this._width)) + "px";
    t2 = this._canvas;
    t2.get$style().set$width(t1);
    t1 = $.S($.toString(this._height)) + "px";
    t2.get$style().set$height(t1);
    $.$$indexSet(t2.get$attributes(), "width", $.toString(this._width));
    $.$$indexSet(t2.get$attributes(), "height", $.toString(this._height));
  }
};

$$.CanvasDrawer = {"": "Object;_canvasManager,_offsetX,_offsetY,_boundX,_boundY,backgroundColor<",
  setOffset$2: function(x, y) {
    if (x < 0)
      x = 0;
    else if ($.CONSTANT.$gt(x, this._boundX))
      x = this._boundX;
    if (y < 0)
      y = 0;
    else if ($.CONSTANT.$gt(y, this._boundY))
      y = this._boundY;
    this._offsetX = x;
    this._offsetY = y;
  },
  setBounds$2: function(x, y) {
    if (x < 0)
      x = 0;
    if (y < 0)
      y = 0;
    this._boundX = x;
    this._boundY = y;
  },
  clear$0: function() {
    var t1, c;
    t1 = this._canvasManager;
    c = t1.get$canvas().getContext$1("2d");
    c.set$fillStyle(this.backgroundColor);
    c.fillRect$4(0, 0, t1.get$width(), t1.get$height());
  },
  drawSprite$3: function(s, x, y) {
    var t1, t2, t3, t4;
    t1 = s.get$width();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t1 = x + t1;
    t2 = this._offsetX;
    if (t2 !== (t2 | 0))
      return this.drawSprite$3$bailout(1, s, x, y, t1, t2);
    if (!(t1 < t2)) {
      t1 = this._canvasManager;
      t3 = t1.get$width();
      if (typeof t3 !== "number")
        return this.drawSprite$3$bailout(3, s, x, y, t2, null, t3, t1);
      if (!(x > t2 + t3)) {
        t2 = s.get$height();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t2 = y + t2;
        t3 = this._offsetY;
        if (t3 !== (t3 | 0))
          return this.drawSprite$3$bailout(4, s, x, y, t2, t3, null, t1);
        if (!(t2 < t3)) {
          t1 = t1.get$height();
          if (typeof t1 !== "number")
            return this.drawSprite$3$bailout(6, s, x, y, t3, null, t1);
          t4 = y > t3 + t1;
          t1 = t4;
        } else
          t1 = true;
      } else
        t1 = true;
    } else
      t1 = true;
    if (t1)
      return;
    t1 = this._offsetX;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = this._offsetY;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    this._canvasManager.get$canvas().getContext$1("2d").drawImage$9(s.get$image(), s.get$x(), s.get$y(), s.get$width(), s.get$height(), x - t1, y - t2, s.get$width(), s.get$height());
  },
  drawSprite$3$bailout: function(state0, s, x, y, t1, t2, t4, t3) {
    switch (state0) {
      case 0:
        t1 = s.get$width();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t1 = x + t1;
        t2 = this._offsetX;
      case 1:
        state0 = 0;
      default:
        var t6;
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && !$.CONSTANT1.$lt(t1, t2))
          switch (state0) {
            case 0:
              t1 = this._offsetX;
            case 2:
              state0 = 0;
              t3 = this._canvasManager;
              t4 = t3.get$width();
            case 3:
              state0 = 0;
            default:
              if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && !$.CONSTANT1.$gt(x, $.$$add(t1, t4)))
                switch (state0) {
                  case 0:
                    t1 = s.get$height();
                    if (typeof t1 !== "number")
                      throw $.iae(t1);
                    t1 = y + t1;
                    t2 = this._offsetY;
                  case 4:
                    state0 = 0;
                  default:
                    if (state0 === 6 || state0 === 5 || state0 === 0 && !$.CONSTANT1.$lt(t1, t2))
                      switch (state0) {
                        case 0:
                          t1 = this._offsetY;
                        case 5:
                          state0 = 0;
                          t4 = t3.get$height();
                        case 6:
                          state0 = 0;
                          t6 = $.CONSTANT1.$gt(y, $.$$add(t1, t4));
                          t1 = t6;
                      }
                    else
                      t1 = true;
                }
              else
                t1 = true;
          }
        else
          t1 = true;
        if (t1)
          return;
        t1 = this._offsetX;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t2 = this._offsetY;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        this._canvasManager.get$canvas().getContext$1("2d").drawImage$9(s.get$image(), s.get$x(), s.get$y(), s.get$width(), s.get$height(), x - t1, y - t2, s.get$width(), s.get$height());
    }
  }
};

$$.Sprite = {"": "Object;_liblib$_image,_x,_y,_liblib$_width,_liblib$_height",
  get$x: function() {
    return this._x;
  },
  get$y: function() {
    return this._y;
  },
  get$width: function() {
    return this._liblib$_width;
  },
  get$height: function() {
    return this._liblib$_height;
  },
  get$image: function() {
    return this._liblib$_image;
  }
};

$$.SpriteSheet = {"": "Object;_image,_spriteWidth,_spriteHeight",
  spriteAt$4: function(x, y, width, height) {
    var t1, t2;
    t1 = $ === width;
    if (t1)
      width = null;
    t2 = $ === height;
    if (t2)
      height = null;
    if (t1)
      width = this._spriteWidth;
    if (t2)
      height = this._spriteHeight;
    return $.Sprite$(this._image, x, y, width, height);
  },
  spriteAt$2: function(x, y) {
    return this.spriteAt$4(x, y, $, $);
  },
  SpriteSheet$3: function(imgPath, _spriteWidth, _spriteHeight) {
    this._image = $.ImageElement_ImageElement(null, null, null);
    this._image.set$src(imgPath);
  }
};

$$.Level1 = {"": "Level;_rows,_cols,_sprites",
  Level1$0: function() {
    var road, s_roadTopLeft;
    road = $.SpriteSheet$("img/Street.png", 32, 32);
    s_roadTopLeft = road.spriteAt$2(0, 0);
    road.spriteAt$2(32, 0);
    this.setSpriteAt$3(s_roadTopLeft, 0, 0);
  }
};

$$.Level = {"": "Object;",
  _posToIdx$2: function(row, col) {
    return this._cols * row * col;
  },
  setSpriteAt$3: function(s, row, col) {
    var pos, t1;
    pos = this._posToIdx$2(row, col);
    t1 = $.getInterceptor$JSNumber(pos);
    if (t1.$lt(pos, 0) === true || t1.$ge(pos, this._sprites.length) === true)
      return;
    t1 = this._sprites;
    if (pos !== (pos | 0))
      throw $.iae(pos);
    if (pos < 0 || pos >= t1.length)
      throw $.ioore(pos);
    t1[pos] = s;
  },
  draw$1: function(d) {
    var t1, t2, t3, row, col, t4, t5, t6, t7, t8, t9;
    window.get$console().log$1("drawing");
    for (t1 = $.CONSTANT2.get$iterator(this._sprites), t2 = this._cols, t3 = !(d == null), row = 0, col = 0; t1.moveNext$0() === true;) {
      t4 = t1.get$current();
      if (t3) {
        t5 = window.get$console();
        t6 = t4.get$width();
        if (typeof t6 !== "number")
          throw $.iae(t6);
        t7 = "Drawing sprite at " + $.S(col * t6) + " / ";
        t8 = t4.get$height();
        if (typeof t8 !== "number")
          throw $.iae(t8);
        t5.log$1(t7 + $.S(row * t8));
        t5 = t4.get$width();
        if (typeof t5 !== "number")
          throw $.iae(t5);
        t9 = t4.get$height();
        if (typeof t9 !== "number")
          throw $.iae(t9);
        d.drawSprite$3(t4, col * t5, row * t9);
      }
      ++col;
      if (col >= t2) {
        ++row;
        col = 0;
      }
    }
  },
  Level$2: function(_rows, _cols) {
    this._sprites = $.List_List(this._rows * this._cols);
  }
};

$$.Maps__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.Collections__emitObject(k, t1, t2);
    $.add(t1, ": ");
    $.Collections__emitObject(v, t1, t2);
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt(t1.i_1, 0) === true)
      $.add(t1.sb_0, ", ");
    $.add(t1.sb_0, key);
    $.add(t1.sb_0, ": ");
    $.add(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add(t1.i_1, 1);
  }
};

$$.Collection_clear_anon = {"": "Closure;",
  call$1: function(e) {
    return true;
  }
};

$$.HashSet_forEach_anon = {"": "Closure;f_0",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  }
};

$$.BoundClosure = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure0 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};
$$.BoundClosure1 = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function($receiver, other) {
    return this.call$2($receiver, other, 0);
  }
};
$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var t1;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && !(value === 0) || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  t1 = $.toString(value);
  if (!(typeof t1 === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return t1;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_objectTypeName = function(object) {
  var name, decompiled, t1;
  name = $.constructorNameFallback(object);
  if ($.$$eq(name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      name = decompiled;
  }
  t1 = $.getInterceptor$JSString(name);
  return t1.charCodeAt$1(name, 0) === 36 ? t1.substring$1(name, 1) : name;
};

$.Primitives_newFixedList = function(length) {
  var result = new Array(length);
  result.fixed$length = true;
  return result;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT0;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString(this);
};

$.unwrapException = function(ex) {
  var message, type, name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if ($.CONSTANT3.endsWith$1(message, "is null") === true || $.CONSTANT3.endsWith$1(message, "is undefined") === true || $.CONSTANT3.endsWith$1(message, "is null or undefined") === true || $.CONSTANT3.endsWith$1(message, "of undefined") === true || $.CONSTANT3.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(t1 ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, t1, key;
  iterator = $.CONSTANT2.get$iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (t1 = $.getInterceptor$JSArray(result); iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    t1.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var name = tag;
  if (name === "Window")
    return "DOMWindow";
  if (name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name === "WebKitMutationObserver")
    return "MutationObserver";
  if (name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name === "AudioGainNode")
    return "GainNode";
  if (name === "AudioPannerNode")
    return "PannerNode";
  if (name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name === "Oscillator")
    return "OscillatorNode";
  if (name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name;
};

$.typeNameInOpera = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "ApplicationCache")
    return "DOMApplicationCache";
  return name;
};

$.typeNameInFirefox = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name === "DataTransfer")
    return "Clipboard";
  if (name === "DragEvent")
    return "MouseEvent";
  if (name === "GeoGeolocation")
    return "Geolocation";
  if (name === "MouseScrollEvent")
    return "WheelEvent";
  if (name === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name === "WorkerMessageEvent")
    return "MessageEvent";
  if (name === "XMLDocument")
    return "Document";
  return name;
};

$.typeNameInIE = function(obj) {
  var name = $.constructorNameFallback(obj);
  if (name === "Window")
    return "DOMWindow";
  if (name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name === "ApplicationCache")
    return "DOMApplicationCache";
  if (name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name === "DataTransfer")
    return "Clipboard";
  if (name === "DragEvent")
    return "MouseEvent";
  if (name === "HTMLDDElement")
    return "HTMLElement";
  if (name === "HTMLDTElement")
    return "HTMLElement";
  if (name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name === "HTMLPhraseElement")
    return "HTMLElement";
  if (name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name === "MouseWheelEvent")
    return "WheelEvent";
  if (name === "Position")
    return "Geoposition";
  if (name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return name;
};

$.constructorNameFallback = function(object) {
  var $constructor, name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    name = $constructor.name;
    if (typeof name === "string")
      t1 = !(name === "") && !(name === "Object") && !(name === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name, methods, arguments) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT5));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name + " is not a function");} else {return Object.prototype[name].apply(this, arguments);}};
  if ($.callHasOwnProperty(hasOwnPropertyFunction, proto, name) !== true)
    $.defineProperty(proto, name, method);
  return method.apply(obj, arguments);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT5)[name];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (isMultiLine === true)
    $.add(sb, "m");
  if (isCaseSensitive !== true)
    $.add(sb, "i");
  if (global === true)
    $.add(sb, "g");
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length, patternLength, startIndex, position, t2, endIndex;
  result = $.List_List(0);
  t1 = $.getInterceptor$JSStringJSArray(haystack);
  length = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    t2 = $.getInterceptor(position);
    if (t2.$eq(position, -1) === true)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = t2.$add(position, patternLength);
    if ($.$$eq(endIndex, length) === true)
      break;
    else
      startIndex = t2.$eq(position, endIndex) === true ? $.$$add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.$$eq($.CONSTANT3.indexOf$2(receiver, other, startIndex), -1) !== true;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT3.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.CONSTANT3.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length, t1, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer_StringBuffer("");
      length = receiver.length;
      t1 = $.getInterceptor$JSArray(result);
      t1.add$1(result, to);
      for (i = 0; i < length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        t1.add$1(result, receiver[i]);
        t1.add$1(result, to);
      }
      return t1.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.JsStringBuffer$ = function(content) {
  var t1 = typeof content === "string" ? content : $.S(content);
  return new $.JsStringBuffer(t1);
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.iterator(iterable), t2 = $.getInterceptor(element); t1.moveNext$0() === true;)
    if (t2.$eq(element, t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_removeAll = function(collection, elementsToRemove) {
  var t1;
  for (t1 = $.CONSTANT2.get$iterator(elementsToRemove); t1.moveNext$0() === true;)
    collection.remove$1(t1.get$current());
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  $.removeMatching(collection, $.contains(typeof elementsToRemove === "object" && elementsToRemove !== null && !!elementsToRemove.$isSet ? elementsToRemove : $.toSet(elementsToRemove)));
};

$.IterableMixinWorkaround_removeMatching = function(collection, test) {
  var elementsToRemove, t1, t2;
  elementsToRemove = [];
  for (t1 = $.iterator(collection); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (test.call$1(t2) === true)
      elementsToRemove.push(t2);
  }
  collection.removeAll$1(elementsToRemove);
};

$.IterableMixinWorkaround_removeMatchingList = function(list, test) {
  var retained, length, i, element, t1, t2, t3;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !list.$isJavaScriptIndexingBehavior())
    return $.IterableMixinWorkaround_removeMatchingList$bailout(1, list, test);
  retained = [];
  length = list.length;
  for (i = 0; i < length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if (length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === length)
    return;
  for (t2 = list.length, i = 0; i < t1; ++i) {
    t3 = retained[i];
    if (i >= t2)
      throw $.ioore(i);
    list[i] = t3;
  }
  $.CONSTANT2.set$length(list, t1);
};

$.IterableMixinWorkaround_removeMatchingList$bailout = function(state0, list, test) {
  var retained, length, i, element, t1;
  retained = [];
  length = list.length;
  for (i = 0; i < length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if (length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  if (retained.length === length)
    return;
  for (i = 0; t1 = retained.length, i < t1; ++i)
    $.CONSTANT2.$indexSet(list, i, retained[i]);
  $.CONSTANT2.set$length(list, t1);
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(0));
  return $.toString(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.Collections__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.Collections__containsRef(visiting, o) === true)
      $.add(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.Collections__containsRef(visiting, o) === true)
      $.add(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT.$tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length) {
  return $.$$and($.$$add(currentProbe, numberOfProbes), $.$$sub(length, 1));
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(0));
  return $.toString(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach(m, new $.Maps__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.HashSet$ = function() {
  return new $.HashSet($._HashMapImpl$());
};

$.HashSet_HashSet$from = function(other) {
  var set, t1;
  set = $.HashSet$();
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    set.add$1(t1.get$current());
  return set;
};

$._HashSetIterator$ = function(set) {
  return new $._HashSetIterator($.CONSTANT2.get$iterator(set._backingMap._keys));
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(list, list.length, -1, null);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll($.replaceAll($.replaceAll($.CONSTANT3.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.List_List = function(length) {
  if (!(typeof length === "number" && Math.floor(length) === length) || length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length) + "."));
  return new Array(length);
};

$.List_List$fixedLength = function(length, fill) {
  var result, t1, i;
  if (!(typeof length === "number" && Math.floor(length) === length) || length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S(length) + "."));
  result = $.Primitives_newFixedList(length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.$isJavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, length, fill, result);
  if ($.$$eq(length, 0) !== true && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, length, fill, result) {
  var t1, i;
  if ($.$$eq(length, 0) !== true && !(fill == null))
    for (t1 = $.getInterceptor$JSStringJSArray(result), i = 0; $.CONSTANT.$lt(i, t1.get$length(result)); ++i)
      t1.$indexSet(result, i, fill);
  return result;
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.Set_Set$from = function(other) {
  return $.HashSet_HashSet$from(other);
};

$.StringBuffer_StringBuffer = function(content) {
  return $.JsStringBuffer$(content);
};

$.Console$ = function() {
  return new $.Console();
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = document.$$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.length(array), -1, null);
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$JSStringJSArray(a);
  t2 = $.getInterceptor$JSNumber(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.main = function() {
  window.get$console().log$1("hello");
  $.canvasManager = $.CanvasManager$(document.query$1("canvas#game_canvas"));
  $.canvasManager.resize$2(640, 480);
  $.canvasDrawer = $.CanvasDrawer$($.canvasManager);
  $.canvasDrawer.setBounds$2(640, 480);
  $.canvasDrawer.setOffset$2(0, 0);
  $.canvasDrawer.set$backgroundColor("black");
  $.clear($.canvasDrawer);
  $.Level1$().draw$1($.canvasDrawer);
};

$.CanvasDrawer$ = function(_canvasManager) {
  return new $.CanvasDrawer(_canvasManager, null, null, null, null, "white");
};

$.CanvasManager$ = function(_canvas) {
  return new $.CanvasManager(_canvas, null, null);
};

$.Level1$ = function() {
  var t1 = new $.Level1(15, 20, null);
  t1.Level$2(15, 20);
  t1.Level1$0();
  return t1;
};

$.Sprite$ = function(_image, _x, _y, _width, _height) {
  return new $.Sprite(_image, _x, _y, _width, _height);
};

$.SpriteSheet$ = function(imgPath, _spriteWidth, _spriteHeight) {
  var t1 = new $.SpriteSheet(null, _spriteWidth, _spriteHeight);
  t1.SpriteSheet$3(imgPath, _spriteWidth, _spriteHeight);
  return t1;
};

$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
Isolate.$finishClasses($$);
$$ = {};
$.Node = {builtin$cls: 'Node'};
$.Match = {builtin$cls: 'Match'};
$.String = {builtin$cls: 'String'};
$.CONSTANT2 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT1 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT0 = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT = new Isolate.$isolateProperties.JSInt();
$.CONSTANT3 = new Isolate.$isolateProperties.JSString();
$.CONSTANT4 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT5 = new Isolate.$isolateProperties.Object();
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._getTypeNameOf = null;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CONSTANT4;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.canvasManager = null;
$.canvasDrawer = null;
$.clear = function(receiver) {
  return $.getInterceptor$JSArray(receiver).clear$0(receiver);
};
$.iterator = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$iterator(receiver);
};
$.$$eq = function(receiver, a0) {
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.toString = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.$$gt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$gt(receiver, a0);
};
$.replaceAll = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).replaceAll$2(receiver, a0, a1);
};
$.length = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$length(receiver);
};
$.$$index = function(receiver, a0) {
  return $.getInterceptor$JSStringJSArray(receiver).$index(receiver, a0);
};
$.$$indexSet = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).$indexSet(receiver, a0, a1);
};
$.forEach = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).forEach$1(receiver, a0);
};
$.hashCode = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.$$tdiv = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$tdiv(receiver, a0);
};
$.contains = function(receiver) {
  return $.getInterceptor$JSStringJSArray(receiver).get$contains(receiver);
};
$.$$add = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$add(receiver, a0);
};
$.toSet = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toSet$0(receiver);
};
$.addLast = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addLast$1(receiver, a0);
};
$.remove = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).remove$1(receiver, a0);
};
$.$$mul = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mul(receiver, a0);
};
$.$$and = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$and(receiver, a0);
};
$.$$lt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$lt(receiver, a0);
};
$.allMatches = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).allMatches$1(receiver, a0);
};
$.removeMatching = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).removeMatching$1(receiver, a0);
};
$.add = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).add$1(receiver, a0);
};
$.$$sub = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$sub(receiver, a0);
};
$.$$ge = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$ge(receiver, a0);
};
$.getInterceptor$JSStringJSArray = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, "quoteRegExp", "quoteRegExp", "get$quoteRegExp", function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
Isolate.$lazy($, "safeConsole", "Console_safeConsole", "get$Console_safeConsole", function() {
  return $.Console$();
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $isCollection: function() {
    return false;
  },
  $isList: function() {
    return false;
  },
  $isMap: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(a) {
    return this === a;
  }
});

$.$defineNativeClass("HTMLAnchorElement", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height=,width=",
  getContext$1: function(contextId) {
    return this.getContext(contextId);
  }
});

$.$defineNativeClass("CanvasRenderingContext", {"": "canvas>"});

$.$defineNativeClass("CanvasRenderingContext2D", {"": "fillStyle<",
  drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
    return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
  },
  fillRect$4: function(x, y, width, height) {
    return this.fillRect(x,y,width,height);
  }
});

$.$defineNativeClass("CharacterData", {"": "length>",
  remove$0: function() {
    return this.remove();
  }
});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  set$backgroundColor: function(value) {
    this.setProperty$3("background-color", value, "");
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  get$height: function() {
    return this.getPropertyValue$1("height");
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  get$resize: function() {
    return this.getPropertyValue$1("resize");
  },
  resize$2: function(arg0, arg1) {
    return this.get$resize().call$2(arg0, arg1);
  },
  set$src: function(value) {
    this.setProperty$3("src", value, "");
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  }
});

$.$defineNativeClass("Document", {
  $$dom_createElement$1: function(tagName) {
    return this.createElement(tagName);
  },
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.CONSTANT3.substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  }
});

$.$defineNativeClass("DocumentFragment", {
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "style>",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  query$1: function(selectors) {
    return this.$$dom_querySelector$1(selectors);
  },
  $$dom_getAttribute$1: function(name) {
    return this.getAttribute(name);
  },
  $$dom_hasAttribute$1: function(name) {
    return this.hasAttribute(name);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  $$dom_removeAttribute$1: function(name) {
    return this.removeAttribute(name);
  },
  $$dom_setAttribute$2: function(name, value) {
    return this.setAttribute(name,value);
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height=,src<,width="});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>"});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toSet$0: function() {
    return $.Set_Set$from(this);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height=,src<,width="});

$.$defineNativeClass("HTMLImageElement", {"": "height=,src<,width=,x>,y>"});

$.$defineNativeClass("HTMLInputElement", {"": "height=,pattern>,src<,value=,width="});

$.$defineNativeClass("HTMLLIElement", {"": "value="});

$.$defineNativeClass("HTMLMediaElement", {"": "src<"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toSet$0: function() {
    return $.Set_Set$from(this);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Node", {"": "$$dom_attributes:attributes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~",
  remove$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$0")) {
      var t1 = this.parentNode;
      if (!(t1 == null))
        t1.$$dom_removeChild$1(this);
    } else
      return Object.prototype.remove$0.call(this);
  },
  contains$1: function(other) {
    return this.contains(other);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  toSet$0: function() {
    return $.Set_Set$from(this);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  set$length: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot resize immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, $.length(this));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "height=,width="});

$.$defineNativeClass("HTMLOptionElement", {"": "value="});

$.$defineNativeClass("HTMLOutputElement", {"": "value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("HTMLProgressElement", {"": "value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLScriptElement", {"": "src<"});

$.$defineNativeClass("HTMLSelectElement", {"": "length=,value="});

$.$defineNativeClass("HTMLSourceElement", {"": "src<"});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  $index: function(key) {
    return this.$$dom_getItem$1(key);
  },
  $indexSet: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  remove$1: function(key) {
    var value = this.$index(key);
    this.$$dom_removeItem$1(key);
    return value;
  },
  clear$0: function() {
    return this.$$dom_clear$0();
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.$index(key));
    }
  },
  get$length: function() {
    return this.length;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  $isMap: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLTextAreaElement", {"": "value="});

$.$defineNativeClass("HTMLTrackElement", {"": "src<"});

$.$defineNativeClass("HTMLVideoElement", {"": "height=,width="});

$.$defineNativeClass("DOMWindow", {
  get$console: function() {
    return $.get$Console_safeConsole();
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGCursorElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGGlyphRefElement", {"": "x>,y>"});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x>,y>"});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>,x>,y>"});

// 73 dynamic classes.
// 191 classes
// 16 !leaf
(function() {
  var v0_MediaElement = "HTMLMediaElement|HTMLVideoElement|HTMLAudioElement", v1_TextPositioningElement = "SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTextElement|SVGTSpanElement", v2_Element = [v0_MediaElement, v1_TextPositioningElement, "Element|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGComponentTransferFunctionElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncRElement|SVGFEFuncAElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEConvolveMatrixElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEGaussianBlurElement|SVGFEColorMatrixElement|SVGFEImageElement|SVGFEPointLightElement|SVGFEMergeElement|SVGFESpecularLightingElement|SVGFEOffsetElement|SVGFilterElement|SVGFETurbulenceElement|SVGFESpotLightElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceSrcElement|SVGFEMorphologyElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGFETileElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGImageElement|SVGFontFaceNameElement|SVGHKernElement|SVGGlyphRefElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGLineElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGFEMergeNodeElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement"].join("|"), v3_DocumentFragment = "DocumentFragment|ShadowRoot", v4_CharacterData = "CharacterData|Text|CDATASection|Comment", v5_Document = "Document|SVGDocument|HTMLDocument";
  $.dynamicSetMetadata([["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["CanvasRenderingContext", "CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D"], ["CharacterData", v4_CharacterData], ["HTMLMediaElement", v0_MediaElement], ["Document", v5_Document], ["DocumentFragment", v3_DocumentFragment], ["SVGTextPositioningElement", v1_TextPositioningElement], ["Element", v2_Element], ["Node", [v2_Element, v3_DocumentFragment, v4_CharacterData, v5_Document, "Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction"].join("|")], ["NodeList", "NodeList|RadioNodeList"]]);
})();


//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=beer_run.dart.js.map